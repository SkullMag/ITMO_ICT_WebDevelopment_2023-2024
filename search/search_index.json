{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u0417\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043c\u0435\u0449\u0435\u043d\u044b \u043e\u0442\u0447\u0451\u0442\u044b \u043f\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442","title":"Home"},{"location":"#home","text":"\u0417\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043c\u0435\u0449\u0435\u043d\u044b \u043e\u0442\u0447\u0451\u0442\u044b \u043f\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442","title":"Home"},{"location":"laboratory_work_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: socket.AF INET - IPv4 \u0441\u043e\u043a\u0435\u0442 socket.SOCKDGRAM - UDP import socket # Create a new socket object # AF_INET - IPv4 address family # SOCK_DGRAM - UDP socket type sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u0441\u043e\u043a\u0435\u0442 \u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 # Store server address server_addr = (\"localhost\", 9090) # Bind a socket to a local address sock.bind(server_addr) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 ip-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e recvfrom # Receive data and ip address from a client data, client_addr = sock.recvfrom(1024) print(data.decode()) \u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 sendto # Send a response to the client sock.sendto(b\"Hello, Client!\", client_addr) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: socket.AF INET - IPv4 \u0441\u043e\u043a\u0435\u0442 socket.SOCKDGRAM - UDP import socket # Create a new socket object # AF_INET - IPv4 address family # SOCK_DGRAM - UDP socket type sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Store server address server_addr = (\"localhost\", 9090) \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b sendto # Send bytes to the server address sock.sendto(b\"Hello, Server!\", server_addr) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d # Wait for server reply data = sock.recv(1024) # Print received data print(data.decode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"localhost\", 9090)) sock.listen(1) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 conn, addr = sock.accept() print(\"Received new connection from\", addr) conn.send(b\"Enter a and b splitted by the space, for example: 10 20\") \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u043f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 data = conn.recv(1024) a, b = list(map(int, data.decode().split())) result = (a**2 + b**2)**0.5 conn.sendall(str(result).encode()) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) addr = (\"localhost\", 9090) sock.connect(addr) \u041f\u043e\u043b\u0443\u0447\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0435\u0432\u0435\u0440\u0430 hello_msg = sock.recv(1024).decode() print(hello_msg) \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 data = input().encode() sock.send(data) print(sock.recv(1024).decode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP \u043e\u0442\u0432\u0435\u0442 def create_http_response(body: str) -> bytes: request = f\"HTTP/1.1 200 OK\\nContent-Type: text/html; charset=utf-8\\nContent-Length: {len(body)}\\n\\n{body}\" return request.encode() \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442, \u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u0443\u0436\u0435 TCP (socket.SOCK_STREAM) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"localhost\", 9090)) sock.listen(1) \u0414\u0430\u043b\u044c\u0448\u0435 \u043c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0435\u0433\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 accept . \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c accept , \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 TCP \u0441\u043e\u043a\u0435\u0442\u043e\u043c \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 conn, addr = sock.accept() \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u043c HTTP \u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0430 index.html \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 conn.sendall(create_http_response(open(\"index.html\").read())) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0442\u0435\u043b\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def socket_read_all(s: socket.socket, chunk_size=1024) -> bytes: result = b\"\" while (chunk := s.recv(chunk_size)) != b\"\": result += chunk return result def read_http_body(response: bytes) -> str: lines = response.decode().splitlines() body_start = next((i for i, line in enumerate(lines) if line == \"\"), -1) if body_start == -1: raise ValueError(\"invalid http response\") return \"\\n\".join(lines[body_start + 1:]) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) data = socket_read_all(sock) body = read_http_body(data) print(body) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 - 4 \u0431\u0430\u0439\u0442 big-endian, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 N \u0431\u0430\u0439\u0442 - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041d\u0438\u0436\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f def recv_msg(conn: socket.socket) -> tuple[bytes, bytes]: msg_header = conn.recv(4) if msg_header == b\"\": return length = struct.unpack(\">I\", msg_header)[0] return conn.recv(length) def create_msg(msg: str): msg = msg.encode() return struct.pack(\">I\", len(msg)) + msg \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u043a\u0440\u043e\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. HOST = \"localhost\" PORT = 9090 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((HOST, PORT)) sock.listen(os.cpu_count()) connections: list[socket.socket] = [] \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. def handle_connections(sock: socket.socket): print(\"Server listening on\", HOST, \"port\", PORT) while True: # Accept client connections conn, addr = sock.accept() print(\"New connection\", addr) conn.send(WELCOME_MESSAGE) send_message_to_clients(f\"New user has joined: {addr}\".encode(), (\"Server\", \"\")) connections.append((conn, addr)) # Create a new thread to handle the client client_thread = threading.Thread( target=handle_client, args=( conn, addr, ), ) client_thread.start() \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0436\u0434\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043d\u0435\u0433\u043e, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \"quit\" def handle_client(conn: socket.socket, addr: tuple): try: while (msg := recv_msg(conn)) is not None and msg != b\"quit\": send_message_to_clients(msg, addr) finally: conn.close() \u0422\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def send_message_to_clients(msg: bytes, addr: tuple): global connections payload = create_msg(f\"{addr[0]}:{addr[1]}: \".encode() + msg + b\"\\n\") # Send message to all connected users indexes = set() for i, (conn, conn_addr) in enumerate(connections): if addr == conn_addr: continue try: conn.send(payload) except OSError: indexes.add(i) # Remove disconnected users indexes = list(indexes) indexes.reverse() for i in indexes: connections.pop(i) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0447\u0430\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0436\u0434\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 # Init socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.connect((HOST, PORT)) # Create thread for handling servers' messages t = threading.Thread(target=handle_messages, args=(sock,)) t.start() while True: try: # Get users' input and send it to the server sock.sendall(create_msg(input(INPUT_PROMPT))) except OSError: break \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0435\u0441\u043b\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def handle_messages(conn: socket.socket): while (msg := recv_msg(conn)) is not None and msg != b\"\": print(f\"\\n{msg.decode()}\\n{INPUT_PROMPT}\", end=\"\") sock.close() print(\"LEAVING\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445, \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u0438 HTTP \u043c\u0435\u0442\u043e\u0434\u0430\u0445 class HTTPMethod(Enum): GET = \"GET\" POST = \"POST\" @dataclass class HTTPRequest: method: HTTPMethod protocol: str path: str headers: dict[str, str] body: bytes @dataclass class HTTPResponse: status: int headers: dict[str, str] body: bytes protocol: str = \"HTTP/1.1\" def __bytes__(self): headers_str = \"\\n\".join(f\"{key}: {val}\" for key, val in self.headers.items()) return f\"{self.protocol} {self.status} {HTTPStatus(self.status).phrase}\\n{headers_str}\\n\\n\".encode() + self.body \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u0430\u0448\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435 defaultdict SCORES = defaultdict(list) \u0412 \u043d\u0430\u0448\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 HTTPServer \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 def __enter__(self): self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) return self def __exit__(self, *_): logging.info(\"Shutting down the server\") self.__socket.close() \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def __parse_request(self, conn: socket.socket) -> HTTPRequest: f = conn.recv(1024 * 6) lines = f.splitlines() # Parse start-line try: method, path, protocol = lines[0].decode().strip().split() except IndexError: raise Exception(\"Malformed start-line\") # Parse headers headers: dict[str, str] = {} index = 1 req_generator = ((n, i.decode()) for n, i in enumerate(lines[1:], 1)) while (data := next(req_generator, None)) is not None and data[1].strip() != \"\": index, header = data try: key, val = header.split(\":\") headers[key.lower()] = val.strip() except ValueError: raise Exception(\"Malformed headers\") # Parse body body = b\"\".join(lines[index + 2 :]) return HTTPRequest(HTTPMethod(method), protocol, path, headers, body) \u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 def __handle_client(self, conn: socket.socket): req = self.__parse_request(conn) resp = self.__handle_request(req) self.__send_response(conn, resp) def __send_response(self, conn: socket.socket, resp: HTTPResponse): logging.info(f\"Sent {conn.send(bytes(resp))} bytes\") \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a def __handle_request(self, req: HTTPRequest): logging.info(f\"Got {req.method} request {req.path}\") if req.method == HTTPMethod.GET and req.path.startswith(\"/scores\"): query_params = parse_qs(urlparse(req.path).query) if \"subject\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"subject query param was not specified\"}).encode(), ) return HTTPResponse( status=200, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"score\": SCORES[query_params[\"subject\"][0]]}).encode(), ) elif req.method == HTTPMethod.POST and req.path.startswith(\"/subject\"): query_params = parse_qs(urlparse(req.path).query) if \"name\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"name query param was not specified\"}).encode(), ) if \"score\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"score query param was not specified\"}).encode(), ) SCORES[query_params[\"name\"][0]].append(query_params[\"score\"][0]) return HTTPResponse(status=200, headers={}, body=b\"\") return HTTPResponse(status=404, headers={}, body=b\"\") \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c GET \u0437\u0430\u043f\u0440\u043e\u0441 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) sock.send(b\"GET /scores?subject=test HTTP/1.1\\nContent-Type: text\") print(sock.recv(1024 * 4).decode()) POST \u0437\u0430\u043f\u0440\u043e\u0441 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) sock.send(b\"POST /subject?name=test&score=10 HTTP/1.1\\nContent-Type: text\") print(sock.recv(1024 * 4).decode())","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"laboratory_work_1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"laboratory_work_1/#1_1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"laboratory_work_1/#_1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0431\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_1/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: socket.AF INET - IPv4 \u0441\u043e\u043a\u0435\u0442 socket.SOCKDGRAM - UDP import socket # Create a new socket object # AF_INET - IPv4 address family # SOCK_DGRAM - UDP socket type sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u0441\u043e\u043a\u0435\u0442 \u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 # Store server address server_addr = (\"localhost\", 9090) # Bind a socket to a local address sock.bind(server_addr) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 ip-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e recvfrom # Receive data and ip address from a client data, client_addr = sock.recvfrom(1024) print(data.decode()) \u0414\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 sendto # Send a response to the client sock.sendto(b\"Hello, Client!\", client_addr) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: socket.AF INET - IPv4 \u0441\u043e\u043a\u0435\u0442 socket.SOCKDGRAM - UDP import socket # Create a new socket object # AF_INET - IPv4 address family # SOCK_DGRAM - UDP socket type sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Store server address server_addr = (\"localhost\", 9090) \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b sendto # Send bytes to the server address sock.sendto(b\"Hello, Server!\", server_addr) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d # Wait for server reply data = sock.recv(1024) # Print received data print(data.decode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_1/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"laboratory_work_1/#_3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_1/#_4","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"localhost\", 9090)) sock.listen(1) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 conn, addr = sock.accept() print(\"Received new connection from\", addr) conn.send(b\"Enter a and b splitted by the space, for example: 10 20\") \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u043f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 data = conn.recv(1024) a, b = list(map(int, data.decode().split())) result = (a**2 + b**2)**0.5 conn.sendall(str(result).encode()) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) addr = (\"localhost\", 9090) sock.connect(addr) \u041f\u043e\u043b\u0443\u0447\u0435\u043c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0435\u0432\u0435\u0440\u0430 hello_msg = sock.recv(1024).decode() print(hello_msg) \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 data = input().encode() sock.send(data) print(sock.recv(1024).decode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_1/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"laboratory_work_1/#_5","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_1/#_6","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP \u043e\u0442\u0432\u0435\u0442 def create_http_response(body: str) -> bytes: request = f\"HTTP/1.1 200 OK\\nContent-Type: text/html; charset=utf-8\\nContent-Length: {len(body)}\\n\\n{body}\" return request.encode() \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442, \u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u0443\u0436\u0435 TCP (socket.SOCK_STREAM) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"localhost\", 9090)) sock.listen(1) \u0414\u0430\u043b\u044c\u0448\u0435 \u043c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0435\u0433\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 accept . \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c accept , \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 TCP \u0441\u043e\u043a\u0435\u0442\u043e\u043c \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 conn, addr = sock.accept() \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u043c HTTP \u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0430 index.html \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 conn.sendall(create_http_response(open(\"index.html\").read())) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0442\u0435\u043b\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def socket_read_all(s: socket.socket, chunk_size=1024) -> bytes: result = b\"\" while (chunk := s.recv(chunk_size)) != b\"\": result += chunk return result def read_http_body(response: bytes) -> str: lines = response.decode().splitlines() body_start = next((i for i, line in enumerate(lines) if line == \"\"), -1) if body_start == -1: raise ValueError(\"invalid http response\") return \"\\n\".join(lines[body_start + 1:]) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) data = socket_read_all(sock) body = read_http_body(data) print(body)","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_1/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"laboratory_work_1/#_7","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_1/#_8","text":"\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 - 4 \u0431\u0430\u0439\u0442 big-endian, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 N \u0431\u0430\u0439\u0442 - \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041d\u0438\u0436\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f def recv_msg(conn: socket.socket) -> tuple[bytes, bytes]: msg_header = conn.recv(4) if msg_header == b\"\": return length = struct.unpack(\">I\", msg_header)[0] return conn.recv(length) def create_msg(msg: str): msg = msg.encode() return struct.pack(\">I\", len(msg)) + msg \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u043a\u0440\u043e\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. HOST = \"localhost\" PORT = 9090 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((HOST, PORT)) sock.listen(os.cpu_count()) connections: list[socket.socket] = [] \u0417\u0430\u0442\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043e\u0436\u0438\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. def handle_connections(sock: socket.socket): print(\"Server listening on\", HOST, \"port\", PORT) while True: # Accept client connections conn, addr = sock.accept() print(\"New connection\", addr) conn.send(WELCOME_MESSAGE) send_message_to_clients(f\"New user has joined: {addr}\".encode(), (\"Server\", \"\")) connections.append((conn, addr)) # Create a new thread to handle the client client_thread = threading.Thread( target=handle_client, args=( conn, addr, ), ) client_thread.start() \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0436\u0434\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043d\u0435\u0433\u043e, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \"quit\" def handle_client(conn: socket.socket, addr: tuple): try: while (msg := recv_msg(conn)) is not None and msg != b\"quit\": send_message_to_clients(msg, addr) finally: conn.close() \u0422\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def send_message_to_clients(msg: bytes, addr: tuple): global connections payload = create_msg(f\"{addr[0]}:{addr[1]}: \".encode() + msg + b\"\\n\") # Send message to all connected users indexes = set() for i, (conn, conn_addr) in enumerate(connections): if addr == conn_addr: continue try: conn.send(payload) except OSError: indexes.add(i) # Remove disconnected users indexes = list(indexes) indexes.reverse() for i in indexes: connections.pop(i) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0447\u0430\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0436\u0434\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 # Init socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.connect((HOST, PORT)) # Create thread for handling servers' messages t = threading.Thread(target=handle_messages, args=(sock,)) t.start() while True: try: # Get users' input and send it to the server sock.sendall(create_msg(input(INPUT_PROMPT))) except OSError: break \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u0435\u0441\u043b\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def handle_messages(conn: socket.socket): while (msg := recv_msg(conn)) is not None and msg != b\"\": print(f\"\\n{msg.decode()}\\n{INPUT_PROMPT}\", end=\"\") sock.close() print(\"LEAVING\")","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_1/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"laboratory_work_1/#_9","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_1/#_10","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445, \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u0438 HTTP \u043c\u0435\u0442\u043e\u0434\u0430\u0445 class HTTPMethod(Enum): GET = \"GET\" POST = \"POST\" @dataclass class HTTPRequest: method: HTTPMethod protocol: str path: str headers: dict[str, str] body: bytes @dataclass class HTTPResponse: status: int headers: dict[str, str] body: bytes protocol: str = \"HTTP/1.1\" def __bytes__(self): headers_str = \"\\n\".join(f\"{key}: {val}\" for key, val in self.headers.items()) return f\"{self.protocol} {self.status} {HTTPStatus(self.status).phrase}\\n{headers_str}\\n\\n\".encode() + self.body \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u0430\u0448\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435 defaultdict SCORES = defaultdict(list) \u0412 \u043d\u0430\u0448\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 HTTPServer \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 def __enter__(self): self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) return self def __exit__(self, *_): logging.info(\"Shutting down the server\") self.__socket.close() \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def __parse_request(self, conn: socket.socket) -> HTTPRequest: f = conn.recv(1024 * 6) lines = f.splitlines() # Parse start-line try: method, path, protocol = lines[0].decode().strip().split() except IndexError: raise Exception(\"Malformed start-line\") # Parse headers headers: dict[str, str] = {} index = 1 req_generator = ((n, i.decode()) for n, i in enumerate(lines[1:], 1)) while (data := next(req_generator, None)) is not None and data[1].strip() != \"\": index, header = data try: key, val = header.split(\":\") headers[key.lower()] = val.strip() except ValueError: raise Exception(\"Malformed headers\") # Parse body body = b\"\".join(lines[index + 2 :]) return HTTPRequest(HTTPMethod(method), protocol, path, headers, body) \u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 def __handle_client(self, conn: socket.socket): req = self.__parse_request(conn) resp = self.__handle_request(req) self.__send_response(conn, resp) def __send_response(self, conn: socket.socket, resp: HTTPResponse): logging.info(f\"Sent {conn.send(bytes(resp))} bytes\") \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a def __handle_request(self, req: HTTPRequest): logging.info(f\"Got {req.method} request {req.path}\") if req.method == HTTPMethod.GET and req.path.startswith(\"/scores\"): query_params = parse_qs(urlparse(req.path).query) if \"subject\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"subject query param was not specified\"}).encode(), ) return HTTPResponse( status=200, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"score\": SCORES[query_params[\"subject\"][0]]}).encode(), ) elif req.method == HTTPMethod.POST and req.path.startswith(\"/subject\"): query_params = parse_qs(urlparse(req.path).query) if \"name\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"name query param was not specified\"}).encode(), ) if \"score\" not in query_params: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"detail\": \"score query param was not specified\"}).encode(), ) SCORES[query_params[\"name\"][0]].append(query_params[\"score\"][0]) return HTTPResponse(status=200, headers={}, body=b\"\") return HTTPResponse(status=404, headers={}, body=b\"\") \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c GET \u0437\u0430\u043f\u0440\u043e\u0441 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) sock.send(b\"GET /scores?subject=test HTTP/1.1\\nContent-Type: text\") print(sock.recv(1024 * 4).decode()) POST \u0437\u0430\u043f\u0440\u043e\u0441 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"localhost\", 9090)) sock.send(b\"POST /subject?name=test&score=10 HTTP/1.1\\nContent-Type: text\") print(sock.recv(1024 * 4).decode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441 \"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b\". \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b\u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f Python, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 python -m venv tours-venv pip install django django-admin starproject tours \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c ./manage.py startapp tours_app \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Traveler \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u044b\u043b\u043e \u043b\u0435\u0433\u0447\u0435 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class Traveler(AbstractUser): pass \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b Django \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430/\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 settings.py AUTH_USER_MODEL = \"tours_app.Traveler\" \u041c\u043e\u0434\u0435\u043b\u044c Tour \u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u043c\u0435\u043d\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438, \u0441\u0442\u0440\u0430\u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0443\u0440 class Tour(Model): name = CharField(max_length=200) description = TextField(null=True) country = ForeignKey(\"Country\", CASCADE) payment_details = TextField() tour_agency = ForeignKey(\"TourAgency\", CASCADE) def __str__(self) -> str: return self.name TourDate \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0442\u0443\u0440\u043e\u043c. class TourDate(Model): tour = ForeignKey(Tour, CASCADE) start_date = DateField() end_date = DateField() \u041c\u043e\u0434\u0435\u043b\u044c Reservation \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0443\u0440\u0438\u0441\u0442\u0430 (Traveler) \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0442\u0443\u0440\u0430 (TourDate). \u041e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438. class Reservation(Model): traveler = ForeignKey(Traveler, CASCADE) tour_date = ForeignKey(TourDate, CASCADE) reserved_at = DateTimeField(auto_now_add=True) confirmed = BooleanField(default=False) Review \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0442\u0443\u0440\u0438\u0441\u0442\u0430\u043c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0430\u0442\u0435 \u0442\u0443\u0440\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u0434\u0430\u0442\u0443 \u043e\u0442\u0437\u044b\u0432\u0430. class Review(Model): tour_date = ForeignKey(TourDate, CASCADE) traveler = ForeignKey(Traveler, CASCADE) review_datetime = DateTimeField(auto_now_add=True) comment = TextField() rating = IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) TourAgency \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\u0445, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0442\u0443\u0440\u044b. \u041e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u044c \"\u043c\u043d\u043e\u0433\u0438\u0435 \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c\" \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Tour . class TourAgency(Model): name = CharField(max_length=50) tours = ManyToManyField(Tour) \u041c\u043e\u0434\u0435\u043b\u044c Country \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0430\u043d\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0443\u044e \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u0443\u0440. class Country(Model): code = CharField(max_length=3) # iso 3166 display_name = CharField(max_length=50) \u042d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u043e\u0432, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\u0445 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u0445. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f view \u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 view, \u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c view \u0432\u0445\u043e\u0434\u0430. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f login_traveler_view \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0441\u0430\u0439\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0443\u0440\u0438\u0441\u0442\u0430. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 LoginForm \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f) \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. class LoginForm(Form): username = CharField() password = CharField(widget=PasswordInput) def login_traveler_view(request: HttpRequest) -> HttpResponse: form = LoginForm(request.POST or None) if request.method == \"GET\": return render(request, join(__BASE_TEMPLATE_PATH, \"login.html\"), dict(form=form)) if not form.is_valid(): return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) cd = form.cleaned_data try: user = Traveler.objects.get(username=cd[\"username\"]) except Traveler.DoesNotExist: return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) if user.password != cd[\"password\"]: return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) login(request, user) return redirect(f\"/profile/{user.pk}\") HTML-\u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0445\u043e\u0434\u0430 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0430 base.html . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043b\u043e\u043a\u0438 \u0434\u043b\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. {% extends \"base.html\" %} {% block header %} <title>Login</title> {% endblock %} {% block body %} <h1>Login</h1> <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Login\"> </form> {% endblock %} \u0414\u043b\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442 \u043d\u0430 \u0442\u0443\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f reserve_tour_date_view def reserve_tour_date_view(request: HttpRequest, pk: int) -> HttpResponse: if (user := request.user).is_anonymous: return redirect(\"/login\") try: tour_date = TourDate.objects.get(pk=pk) except Tour.DoesNotExist: raise Http404(\"Tour doesn't exist\") reservation = Reservation(traveler=user, tour_date=tour_date) reservation.save() return render(request, join(__BASE_TEMPLATE_PATH, \"reserved.html\"), dict(user=user, tour_date=tour_date)) \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0435\u0440\u0432\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 {% extends \"base.html\" %} {% block header %} <title>Reserved</title> {% endblock %} {% block body %} <h3>You reserved {{ tour_date.tour.name }} for {{ tour_date.start_date }}</h3> <p>Check your reservations in the profile page</p> {% endblock %} \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f urls \u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b urls.py \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c from django.urls import path from . import views urlpatterns = [ path(\"signup\", views.create_traveler_view), path(\"login\", views.login_traveler_view), path(\"profile/<int:pk>\", views.traveler_profile_view), path(\"profile\", views.traveler_profile_view), path(\"tours\", views.all_tours_view), path(\"reserve/<int:pk>\", views.reserve_tour_date_view), path(\"cancel_reservation/<int:pk>\", views.cancel_reservation_view), path(\"review_tour/<int:pk>\", views.write_tour_review_view), path(\"sold_by_country\", views.sold_tour_dates_by_country_view) ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u0443\u0442\u0435\u0439 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 urls.py \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 urlpatterns = [path(\"admin/\", admin.site.urls), path(\"\", include(\"tours_app.urls\"))]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"laboratory_work_2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"laboratory_work_2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441 \"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0443\u0440\u043e\u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0438\u0440\u043c\u044b\". \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b\u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_2/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"laboratory_work_2/#_3","text":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f Python, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 python -m venv tours-venv pip install django django-admin starproject tours \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c ./manage.py startapp tours_app","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"laboratory_work_2/#_4","text":"Traveler \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u044b\u043b\u043e \u043b\u0435\u0433\u0447\u0435 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class Traveler(AbstractUser): pass \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b Django \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430/\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 settings.py AUTH_USER_MODEL = \"tours_app.Traveler\" \u041c\u043e\u0434\u0435\u043b\u044c Tour \u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u043c\u0435\u043d\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438, \u0441\u0442\u0440\u0430\u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0443\u0440 class Tour(Model): name = CharField(max_length=200) description = TextField(null=True) country = ForeignKey(\"Country\", CASCADE) payment_details = TextField() tour_agency = ForeignKey(\"TourAgency\", CASCADE) def __str__(self) -> str: return self.name TourDate \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0442\u0443\u0440\u043e\u043c. class TourDate(Model): tour = ForeignKey(Tour, CASCADE) start_date = DateField() end_date = DateField() \u041c\u043e\u0434\u0435\u043b\u044c Reservation \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0443\u0440\u0438\u0441\u0442\u0430 (Traveler) \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0442\u0443\u0440\u0430 (TourDate). \u041e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438. class Reservation(Model): traveler = ForeignKey(Traveler, CASCADE) tour_date = ForeignKey(TourDate, CASCADE) reserved_at = DateTimeField(auto_now_add=True) confirmed = BooleanField(default=False) Review \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0442\u0443\u0440\u0438\u0441\u0442\u0430\u043c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0430\u0442\u0435 \u0442\u0443\u0440\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u0434\u0430\u0442\u0443 \u043e\u0442\u0437\u044b\u0432\u0430. class Review(Model): tour_date = ForeignKey(TourDate, CASCADE) traveler = ForeignKey(Traveler, CASCADE) review_datetime = DateTimeField(auto_now_add=True) comment = TextField() rating = IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) TourAgency \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\u0445, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0442\u0443\u0440\u044b. \u041e\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u044c \"\u043c\u043d\u043e\u0433\u0438\u0435 \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c\" \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Tour . class TourAgency(Model): name = CharField(max_length=50) tours = ManyToManyField(Tour) \u041c\u043e\u0434\u0435\u043b\u044c Country \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0440\u0430\u043d\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0443\u044e \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u0443\u0440. class Country(Model): code = CharField(max_length=3) # iso 3166 display_name = CharField(max_length=50) \u042d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0443\u0440\u043e\u0432, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430\u0445 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u0445.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"laboratory_work_2/#view","text":"\u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 view, \u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c view \u0432\u0445\u043e\u0434\u0430. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f login_traveler_view \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0441\u0430\u0439\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0443\u0440\u0438\u0441\u0442\u0430. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 LoginForm \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f) \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. class LoginForm(Form): username = CharField() password = CharField(widget=PasswordInput) def login_traveler_view(request: HttpRequest) -> HttpResponse: form = LoginForm(request.POST or None) if request.method == \"GET\": return render(request, join(__BASE_TEMPLATE_PATH, \"login.html\"), dict(form=form)) if not form.is_valid(): return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) cd = form.cleaned_data try: user = Traveler.objects.get(username=cd[\"username\"]) except Traveler.DoesNotExist: return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) if user.password != cd[\"password\"]: return render(request, join(__BASE_TEMPLATE_PATH, \"invalid_login.html\")) login(request, user) return redirect(f\"/profile/{user.pk}\") HTML-\u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u0445\u043e\u0434\u0430 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0430 base.html . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043b\u043e\u043a\u0438 \u0434\u043b\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. {% extends \"base.html\" %} {% block header %} <title>Login</title> {% endblock %} {% block body %} <h1>Login</h1> <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Login\"> </form> {% endblock %} \u0414\u043b\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442 \u043d\u0430 \u0442\u0443\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f reserve_tour_date_view def reserve_tour_date_view(request: HttpRequest, pk: int) -> HttpResponse: if (user := request.user).is_anonymous: return redirect(\"/login\") try: tour_date = TourDate.objects.get(pk=pk) except Tour.DoesNotExist: raise Http404(\"Tour doesn't exist\") reservation = Reservation(traveler=user, tour_date=tour_date) reservation.save() return render(request, join(__BASE_TEMPLATE_PATH, \"reserved.html\"), dict(user=user, tour_date=tour_date)) \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0435\u0440\u0432\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 {% extends \"base.html\" %} {% block header %} <title>Reserved</title> {% endblock %} {% block body %} <h3>You reserved {{ tour_date.tour.name }} for {{ tour_date.start_date }}</h3> <p>Check your reservations in the profile page</p> {% endblock %}","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f view"},{"location":"laboratory_work_2/#urls","text":"\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b urls.py \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c from django.urls import path from . import views urlpatterns = [ path(\"signup\", views.create_traveler_view), path(\"login\", views.login_traveler_view), path(\"profile/<int:pk>\", views.traveler_profile_view), path(\"profile\", views.traveler_profile_view), path(\"tours\", views.all_tours_view), path(\"reserve/<int:pk>\", views.reserve_tour_date_view), path(\"cancel_reservation/<int:pk>\", views.cancel_reservation_view), path(\"review_tour/<int:pk>\", views.write_tour_review_view), path(\"sold_by_country\", views.sold_tour_dates_by_country_view) ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0441\u0435\u0445 \u043f\u0443\u0442\u0435\u0439 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 urls.py \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 urlpatterns = [path(\"admin/\", admin.site.urls), path(\"\", include(\"tours_app.urls\"))]","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f urls"},{"location":"laboratory_work_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \"\u0411\u043b\u043e\u0433\" models.py \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0438 \u0435\u0433\u043e \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 class User(AbstractUser): bio = models.TextField(blank=True) profile_picture = models.ImageField(upload_to=\"profile_pics/\", blank=True, null=True) \u0423 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u0446\u043a\u0430\u0446\u0438\u0438 \u0435\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u0440, \u0442\u0435\u043a\u0441\u0442 \u0441\u0430\u043c\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438, \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 class Post(models.Model): author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"posts\") content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) likes = models.ManyToManyField(User, related_name=\"liked_posts\", blank=True) \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0441\u0435\u0431\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0435\u043a\u0441\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. class Comment(models.Model): post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"comments\") author = models.ForeignKey(User, on_delete=models.CASCADE) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class Follow(models.Model): follower = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"following\") followed = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"followers\") created_at = models.DateTimeField(auto_now_add=True) serializers.py \u0414\u043b\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0430\u0434 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 API \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c ModelSerializer \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412 MyUserSerializer \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 create , \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0445\u0435\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0432 \u0431\u0430\u0437\u0443 class MyUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ( \"id\", \"password\", \"username\", \"email\", \"first_name\", \"last_name\", \"bio\", \"profile_picture\", ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password(validated_data[\"password\"])}) \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: class PostSerializer(serializers.ModelSerializer): class Meta: model = Post fields = (\"id\", \"author\", \"content\", \"created_at\", \"likes\") class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = (\"id\", \"post\", \"author\", \"content\", \"created_at\") class FollowSerializer(serializers.ModelSerializer): class Meta: model = Follow fields = (\"id\", \"follower\", \"followed\", \"created_at\") views.py \u041a\u043b\u0430\u0441\u0441 viewsets.ModelViewSet \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f rest_framework \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer class PostViewSet(viewsets.ModelViewSet): queryset = Post.objects.all() serializer_class = PostSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer class FollowViewSet(viewsets.ModelViewSet): queryset = Follow.objects.all() serializer_class = FollowSerializer settings.py \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f API \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 INSTALLED_APPS = [ ... \"blog_app\", \"rest_framework\", \"rest_framework.authtoken\", \"djoser\", \"django_extensions\", \"drf_yasg\", ] \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b djoser \u0437\u043d\u0430\u043b \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u043e\u0439 serializer \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u0430\u0441\u0441\u0430 DJOSER = { \"SERIALIZERS\": { \"user_create\": \"blog_app.serializers.MyUserSerializer\", }, } \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0431\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 REST_FRAMEWORK = { \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"], \"DEFAULT_AUTHENTICATION_CLASSES\": [ \"rest_framework.authentication.TokenAuthentication\", ], } urls.py \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b - api/ - auth/ - admin/ - profile_pics/ - swagger/ # Project urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"api/\", include(\"blog_app.urls\")), path(\"auth/\", include(\"djoser.urls\")), path(\"auth/\", include(\"djoser.urls.authtoken\")), re_path( r\"^profile_pics/(?P<path>.*)$\", serve, { \"document_root\": \"profile_pics/\", }, ), path( \"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\", ), ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u0432 api/ - users/ - posts/ - comments/ - follows/ # App r = DefaultRouter() r.register('users', UserViewSet) r.register('posts', PostViewSet) r.register('comments', CommentViewSet) r.register('follows', FollowViewSet) urlpatterns = r.urls Endpoints Posts URL : /api/posts/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content POST : { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] } Content GET : [ { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] } ] URL : /api/posts/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] } Users URL : /api/users/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 4, \"password\": \"pbkdf2_sha256$600000$F7f3v7MCJGoP6McdUIbVhy$1C2QmGpBE2qMVXQ7OmdeVMKr/S39AO1ZODnIZDJ56zE=\", \"username\": \"cruser\", \"email\": \"\", \"first_name\": \"\", \"last_name\": \"\", \"bio\": \"\", \"profile_picture\": null } URL : /api/users/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"email\": \"\", \"id\": 3, \"username\": \"oleg\" } Comments URL : /api/comments/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 1, \"post\": 1, \"author\": 3, \"content\": \"test text\", \"created_at\": \"2023-12-12T08:19:47.471546Z\" } ] URL : /api/comments/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 1, \"post\": 1, \"author\": 3, \"content\": \"test text\", \"created_at\": \"2023-12-12T08:19:47.471546Z\" } Follows URL : /api/follows/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 1, \"follower\": 3, \"followed\": 3, \"created_at\": \"2023-12-12T08:20:54.252996Z\" } ] URL : /api/follows/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 1, \"follower\": 3, \"followed\": 3, \"created_at\": \"2023-12-12T08:20:54.252996Z\" }","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"laboratory_work_3/#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"laboratory_work_3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \"\u0411\u043b\u043e\u0433\"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_3/#modelspy","text":"\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0438 \u0435\u0433\u043e \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 class User(AbstractUser): bio = models.TextField(blank=True) profile_picture = models.ImageField(upload_to=\"profile_pics/\", blank=True, null=True) \u0423 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u0446\u043a\u0430\u0446\u0438\u0438 \u0435\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u0440, \u0442\u0435\u043a\u0441\u0442 \u0441\u0430\u043c\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438, \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 class Post(models.Model): author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"posts\") content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) likes = models.ManyToManyField(User, related_name=\"liked_posts\", blank=True) \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0441\u0435\u0431\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0435\u043a\u0441\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. class Comment(models.Model): post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"comments\") author = models.ForeignKey(User, on_delete=models.CASCADE) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class Follow(models.Model): follower = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"following\") followed = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"followers\") created_at = models.DateTimeField(auto_now_add=True)","title":"models.py"},{"location":"laboratory_work_3/#serializerspy","text":"\u0414\u043b\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0430\u0434 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 API \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c ModelSerializer \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412 MyUserSerializer \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 create , \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0445\u0435\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0432 \u0431\u0430\u0437\u0443 class MyUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ( \"id\", \"password\", \"username\", \"email\", \"first_name\", \"last_name\", \"bio\", \"profile_picture\", ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password(validated_data[\"password\"])}) \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: class PostSerializer(serializers.ModelSerializer): class Meta: model = Post fields = (\"id\", \"author\", \"content\", \"created_at\", \"likes\") class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = (\"id\", \"post\", \"author\", \"content\", \"created_at\") class FollowSerializer(serializers.ModelSerializer): class Meta: model = Follow fields = (\"id\", \"follower\", \"followed\", \"created_at\")","title":"serializers.py"},{"location":"laboratory_work_3/#viewspy","text":"\u041a\u043b\u0430\u0441\u0441 viewsets.ModelViewSet \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f rest_framework \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer class PostViewSet(viewsets.ModelViewSet): queryset = Post.objects.all() serializer_class = PostSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer class FollowViewSet(viewsets.ModelViewSet): queryset = Follow.objects.all() serializer_class = FollowSerializer","title":"views.py"},{"location":"laboratory_work_3/#settingspy","text":"\u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f API \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 INSTALLED_APPS = [ ... \"blog_app\", \"rest_framework\", \"rest_framework.authtoken\", \"djoser\", \"django_extensions\", \"drf_yasg\", ] \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b djoser \u0437\u043d\u0430\u043b \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u043e\u0439 serializer \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u0430\u0441\u0441\u0430 DJOSER = { \"SERIALIZERS\": { \"user_create\": \"blog_app.serializers.MyUserSerializer\", }, } \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0431\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 REST_FRAMEWORK = { \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"], \"DEFAULT_AUTHENTICATION_CLASSES\": [ \"rest_framework.authentication.TokenAuthentication\", ], }","title":"settings.py"},{"location":"laboratory_work_3/#urlspy","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b - api/ - auth/ - admin/ - profile_pics/ - swagger/ # Project urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"api/\", include(\"blog_app.urls\")), path(\"auth/\", include(\"djoser.urls\")), path(\"auth/\", include(\"djoser.urls.authtoken\")), re_path( r\"^profile_pics/(?P<path>.*)$\", serve, { \"document_root\": \"profile_pics/\", }, ), path( \"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\", ), ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u0432 api/ - users/ - posts/ - comments/ - follows/ # App r = DefaultRouter() r.register('users', UserViewSet) r.register('posts', PostViewSet) r.register('comments', CommentViewSet) r.register('follows', FollowViewSet) urlpatterns = r.urls","title":"urls.py"},{"location":"laboratory_work_3/#endpoints","text":"","title":"Endpoints"},{"location":"laboratory_work_3/#posts","text":"URL : /api/posts/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Posts"},{"location":"laboratory_work_3/#success-responses","text":"Code : 200 OK Content POST : { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] } Content GET : [ { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] } ] URL : /api/posts/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"laboratory_work_3/#success-responses_1","text":"Code : 200 OK Content : { \"id\": 1, \"author\": 3, \"content\": \"test\", \"created_at\": \"2023-12-12T08:10:55.596943Z\", \"likes\": [] }","title":"Success Responses"},{"location":"laboratory_work_3/#users","text":"URL : /api/users/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Users"},{"location":"laboratory_work_3/#success-responses_2","text":"Code : 200 OK Content : { \"id\": 4, \"password\": \"pbkdf2_sha256$600000$F7f3v7MCJGoP6McdUIbVhy$1C2QmGpBE2qMVXQ7OmdeVMKr/S39AO1ZODnIZDJ56zE=\", \"username\": \"cruser\", \"email\": \"\", \"first_name\": \"\", \"last_name\": \"\", \"bio\": \"\", \"profile_picture\": null } URL : /api/users/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"laboratory_work_3/#success-responses_3","text":"Code : 200 OK Content : { \"email\": \"\", \"id\": 3, \"username\": \"oleg\" }","title":"Success Responses"},{"location":"laboratory_work_3/#comments","text":"URL : /api/comments/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Comments"},{"location":"laboratory_work_3/#success-responses_4","text":"Code : 200 OK Content : [ { \"id\": 1, \"post\": 1, \"author\": 3, \"content\": \"test text\", \"created_at\": \"2023-12-12T08:19:47.471546Z\" } ] URL : /api/comments/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"laboratory_work_3/#success-responses_5","text":"Code : 200 OK Content : { \"id\": 1, \"post\": 1, \"author\": 3, \"content\": \"test text\", \"created_at\": \"2023-12-12T08:19:47.471546Z\" }","title":"Success Responses"},{"location":"laboratory_work_3/#follows","text":"URL : /api/follows/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Follows"},{"location":"laboratory_work_3/#success-responses_6","text":"Code : 200 OK Content : [ { \"id\": 1, \"follower\": 3, \"followed\": 3, \"created_at\": \"2023-12-12T08:20:54.252996Z\" } ] URL : /api/follows/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"laboratory_work_3/#success-responses_7","text":"Code : 200 OK Content : { \"id\": 1, \"follower\": 3, \"followed\": 3, \"created_at\": \"2023-12-12T08:20:54.252996Z\" }","title":"Success Responses"},{"location":"laboratory_work_4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 main.js \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432 \u043a \u043d\u0435\u043c\u0443 \u0440\u043e\u0443\u0442\u0435\u0440 \u0438 pinia \u0434\u043b\u044f state management import { createApp } from 'vue' import { createPinia } from 'pinia' import App from './App.vue' import router from './router' const pinia = createPinia() const app = createApp(App) app.use(pinia) app.use(router) app.mount('#app') store/index.js \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043c \u043e\u043d\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b import { defineStore } from 'pinia' export const useAuthStore = defineStore('auth', { state: () => ({ password: localStorage.getItem(\"password\"), username: localStorage.getItem(\"username\"), token: localStorage.getItem(\"auth_token\") }), getters: { userData: (state) => state }, actions: { login(username, password, token) { this.username = username this.password = password this.token = token localStorage.setItem(\"auth_token\", token) localStorage.setItem(\"username\", username) localStorage.setItem(\"password\", password) } } }) api/index.js \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0448 backend \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c Authorization header \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042f \u0432\u044b\u0431\u0440\u0430\u043b axios \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 import axios from 'axios' const instance = axios.create({ baseURL: 'http://localhost:8080', headers: { 'Content-Type': 'application/json' }, }) instance.interceptors.request.use(function (cfg) { const authToken = localStorage.getItem(\"auth_token\") if (authToken !== null && authToken !== \"undefined\") { cfg.headers.Authorization = `Token ${authToken}` } return cfg }, function (error) { return Promise.reject(error) }) export default instance views/AuthView.vue \u0412 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 - \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. <script> import api from '@/api' import router from '@/router' import { useAuthStore } from '@/store/auth' export default { data() { this.authStore = useAuthStore() return { signupData: { email: '', username: '', password: '', }, loginData: { email: '', username: '', password: '', }, } }, methods: { login() { api .post('auth/token/login', { username: this.loginData.username, password: this.loginData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.loginData.username, this.loginData.password, data.auth_token ) router.push({ path: '/profile' }) }) }, signup() { api .post('api/users/', { email: this.signupData.email, username: this.signupData.username, password: this.signupData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.signupData.username, this.signupData.password, data.auth_token ) router.push({ path: '/profile' }) }) }, }, } </script> <template> <div class=\"login\"> <h3>Login</h3> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"loginData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"loginData.password\" /> <br /> <br /> <button v-on:click=\"login\">Login</button> </div> <div class=\"signup\"> <h3>Sign Up</h3> <label for=\"email\">Email</label> <input type=\"text\" name=\"email\" v-model=\"signupData.email\" /> <br /> <br /> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"signupData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"signupData.password\" /> <br /> <br /> <button v-on:click=\"signup\">Sign Up</button> </div> </template> views/ProfileView.vue \u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 ViewSet \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u0447\u0442\u043e\u0431\u044b \u043c\u044b \u043c\u043e\u0433\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0430, \u043d\u043e \u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class UsernameViewSet(viewsets.ViewSet): def partial_update(self, req:Request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, username=pk) user.__dict__.update(req.data) user.save() return Response() def retrieve(self, _, pk=None): queryset = User.objects.all() serializer = MyUserSerializer(get_object_or_404(queryset, username=pk)) return Response(serializer.data) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041c\u0435\u0442\u043e\u0434 beforeMount \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <script> import { useAuthStore } from '@/store/auth' import router from '@/router' import api from '@/api' export default { data() { this.authStore = useAuthStore() if (this.authStore.userData.username === '') { router.push({ path: '/auth' }) return } this.authStore.userData.email = '' this.authStore.userData.bio = '' return this.authStore.userData }, methods: { updateUserData() { api.patch(`api/username/${this.username}/`, { email: this.email, username: this.username, bio: this.bio, }) }, }, beforeMount() { api .get(`api/username/${this.username}`) .then((resp) => resp.data) .then((data) => { console.log(data) this.username = data.username this.email = data.email this.bio = data.bio }) }, } </script> <template> <div class=\"userInfo\"> <label for=\"username\">Username</label> <br /> <input type=\"text\" name=\"username\" v-model=\"username\" /> <br /><br /> <label for=\"email\">Email</label> <br /> <input type=\"email\" name=\"email\" v-model=\"email\" /> <br /><br /> <label for=\"bio\">Bio</label> <br /> <textarea name=\"bio\" cols=\"30\" rows=\"3\" v-model=\"bio\"></textarea> <br /><br /> <button v-on:click=\"updateUserData\">Update</button> </div> </template> <style scoped> .userInfo { padding-top: 20px; } </style> views/PostsView.vue \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 <script> import api from '@/api' import Post from '@/components/Post.vue' import router from '@/router' export default { data() { return { posts: [] } }, components: { Post, }, methods: { getPosts() { api .get('api/posts/') .then((resp) => resp.data) .then((data) => (this.posts = data)) .catch(() => alert('Failed to fetch posts')) }, newPost() { router.push({ path: '/newpost' }) }, }, beforeMount() { this.getPosts() }, } </script> <template> <br /> <button v-on:click=\"newPost\">New post</button> <ol class=\"posts\"> <Post v-for=\"post in posts\" :post=\"post\" :key=\"post.id\" /> </ol> </template> \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 Post.vue , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c <script> import router from '@/router' export default { name: 'post', props: ['post'], methods: { openPost() { router.push({ path: `/posts/${this.post.id}` }) }, }, } </script> <template> <li class=\"post\" v-on:click=\"openPost\"> <h3>{{ post.title }}</h3> <p>by {{ post.author.username }} at {{ post.created_at }}</p> </li> </template> <style scoped> .post { cursor: pointer; } </style> views/PostView.vue \u0422\u0430\u043a\u0436\u0435, \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u0442 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0436\u0430\u0442\u044c \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 <script> import api from '@/api' import CommentsView from './CommentsView.vue' export default { data() { return { post: { id: this.$route.params.id, title: '', content: '' } } }, beforeMount() { api .get(`api/posts/${this.post.id}`) .then((resp) => resp.data) .then((data) => (this.post = data)) .catch((_) => alert('Failed to fetch post')) }, components: [CommentsView], components: { CommentsView }, } </script> <template> <h1>{{ post.title }}</h1> <textarea name=\"content\" cols=\"30\" rows=\"10\" readonly>{{ post.content }}</textarea> <CommentsView :post=\"post\" /> </template> views/CommentsView.vue \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c <script> import api from '@/api' import router from '@/router' import Comment from '@/components/Comment.vue' import { RouterLink } from 'vue-router' export default { props: ['post'], data() { return { post: this.$props.post, comments: [] } }, methods: { newComment() { router.push({ path: `/posts/${this.post.id}/newcomment` }) }, }, beforeMount() { api .get(`api/post_comments/${this.post.id}`) .then((resp) => resp.data) .then((data) => (this.comments = data)) .catch((_) => alert('Failed to fetch comments')) }, components: [Comment], components: { Comment, RouterLink }, } </script> <template> <h3>Comments</h3> <button v-on:click=\"newComment\">New comment</button> <Comment v-for=\"comment in comments\" :comment=\"comment\" :key=\"comment.id\" /> </template>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4"},{"location":"laboratory_work_4/#4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4"},{"location":"laboratory_work_4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"laboratory_work_4/#_2","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"laboratory_work_4/#mainjs","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432 \u043a \u043d\u0435\u043c\u0443 \u0440\u043e\u0443\u0442\u0435\u0440 \u0438 pinia \u0434\u043b\u044f state management import { createApp } from 'vue' import { createPinia } from 'pinia' import App from './App.vue' import router from './router' const pinia = createPinia() const app = createApp(App) app.use(pinia) app.use(router) app.mount('#app')","title":"main.js"},{"location":"laboratory_work_4/#storeindexjs","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043c \u043e\u043d\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b import { defineStore } from 'pinia' export const useAuthStore = defineStore('auth', { state: () => ({ password: localStorage.getItem(\"password\"), username: localStorage.getItem(\"username\"), token: localStorage.getItem(\"auth_token\") }), getters: { userData: (state) => state }, actions: { login(username, password, token) { this.username = username this.password = password this.token = token localStorage.setItem(\"auth_token\", token) localStorage.setItem(\"username\", username) localStorage.setItem(\"password\", password) } } })","title":"store/index.js"},{"location":"laboratory_work_4/#apiindexjs","text":"\u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0448 backend \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c Authorization header \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042f \u0432\u044b\u0431\u0440\u0430\u043b axios \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 import axios from 'axios' const instance = axios.create({ baseURL: 'http://localhost:8080', headers: { 'Content-Type': 'application/json' }, }) instance.interceptors.request.use(function (cfg) { const authToken = localStorage.getItem(\"auth_token\") if (authToken !== null && authToken !== \"undefined\") { cfg.headers.Authorization = `Token ${authToken}` } return cfg }, function (error) { return Promise.reject(error) }) export default instance","title":"api/index.js"},{"location":"laboratory_work_4/#viewsauthviewvue","text":"\u0412 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 - \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. <script> import api from '@/api' import router from '@/router' import { useAuthStore } from '@/store/auth' export default { data() { this.authStore = useAuthStore() return { signupData: { email: '', username: '', password: '', }, loginData: { email: '', username: '', password: '', }, } }, methods: { login() { api .post('auth/token/login', { username: this.loginData.username, password: this.loginData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.loginData.username, this.loginData.password, data.auth_token ) router.push({ path: '/profile' }) }) }, signup() { api .post('api/users/', { email: this.signupData.email, username: this.signupData.username, password: this.signupData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.signupData.username, this.signupData.password, data.auth_token ) router.push({ path: '/profile' }) }) }, }, } </script> <template> <div class=\"login\"> <h3>Login</h3> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"loginData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"loginData.password\" /> <br /> <br /> <button v-on:click=\"login\">Login</button> </div> <div class=\"signup\"> <h3>Sign Up</h3> <label for=\"email\">Email</label> <input type=\"text\" name=\"email\" v-model=\"signupData.email\" /> <br /> <br /> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"signupData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"signupData.password\" /> <br /> <br /> <button v-on:click=\"signup\">Sign Up</button> </div> </template>","title":"views/AuthView.vue"},{"location":"laboratory_work_4/#viewsprofileviewvue","text":"\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 ViewSet \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435, \u0447\u0442\u043e\u0431\u044b \u043c\u044b \u043c\u043e\u0433\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0430, \u043d\u043e \u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class UsernameViewSet(viewsets.ViewSet): def partial_update(self, req:Request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, username=pk) user.__dict__.update(req.data) user.save() return Response() def retrieve(self, _, pk=None): queryset = User.objects.all() serializer = MyUserSerializer(get_object_or_404(queryset, username=pk)) return Response(serializer.data) \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041c\u0435\u0442\u043e\u0434 beforeMount \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <script> import { useAuthStore } from '@/store/auth' import router from '@/router' import api from '@/api' export default { data() { this.authStore = useAuthStore() if (this.authStore.userData.username === '') { router.push({ path: '/auth' }) return } this.authStore.userData.email = '' this.authStore.userData.bio = '' return this.authStore.userData }, methods: { updateUserData() { api.patch(`api/username/${this.username}/`, { email: this.email, username: this.username, bio: this.bio, }) }, }, beforeMount() { api .get(`api/username/${this.username}`) .then((resp) => resp.data) .then((data) => { console.log(data) this.username = data.username this.email = data.email this.bio = data.bio }) }, } </script> <template> <div class=\"userInfo\"> <label for=\"username\">Username</label> <br /> <input type=\"text\" name=\"username\" v-model=\"username\" /> <br /><br /> <label for=\"email\">Email</label> <br /> <input type=\"email\" name=\"email\" v-model=\"email\" /> <br /><br /> <label for=\"bio\">Bio</label> <br /> <textarea name=\"bio\" cols=\"30\" rows=\"3\" v-model=\"bio\"></textarea> <br /><br /> <button v-on:click=\"updateUserData\">Update</button> </div> </template> <style scoped> .userInfo { padding-top: 20px; } </style>","title":"views/ProfileView.vue"},{"location":"laboratory_work_4/#viewspostsviewvue","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 <script> import api from '@/api' import Post from '@/components/Post.vue' import router from '@/router' export default { data() { return { posts: [] } }, components: { Post, }, methods: { getPosts() { api .get('api/posts/') .then((resp) => resp.data) .then((data) => (this.posts = data)) .catch(() => alert('Failed to fetch posts')) }, newPost() { router.push({ path: '/newpost' }) }, }, beforeMount() { this.getPosts() }, } </script> <template> <br /> <button v-on:click=\"newPost\">New post</button> <ol class=\"posts\"> <Post v-for=\"post in posts\" :post=\"post\" :key=\"post.id\" /> </ol> </template> \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 Post.vue , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c <script> import router from '@/router' export default { name: 'post', props: ['post'], methods: { openPost() { router.push({ path: `/posts/${this.post.id}` }) }, }, } </script> <template> <li class=\"post\" v-on:click=\"openPost\"> <h3>{{ post.title }}</h3> <p>by {{ post.author.username }} at {{ post.created_at }}</p> </li> </template> <style scoped> .post { cursor: pointer; } </style>","title":"views/PostsView.vue"},{"location":"laboratory_work_4/#viewspostviewvue","text":"\u0422\u0430\u043a\u0436\u0435, \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u0442 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0436\u0430\u0442\u044c \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 <script> import api from '@/api' import CommentsView from './CommentsView.vue' export default { data() { return { post: { id: this.$route.params.id, title: '', content: '' } } }, beforeMount() { api .get(`api/posts/${this.post.id}`) .then((resp) => resp.data) .then((data) => (this.post = data)) .catch((_) => alert('Failed to fetch post')) }, components: [CommentsView], components: { CommentsView }, } </script> <template> <h1>{{ post.title }}</h1> <textarea name=\"content\" cols=\"30\" rows=\"10\" readonly>{{ post.content }}</textarea> <CommentsView :post=\"post\" /> </template>","title":"views/PostView.vue"},{"location":"laboratory_work_4/#viewscommentsviewvue","text":"\u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c <script> import api from '@/api' import router from '@/router' import Comment from '@/components/Comment.vue' import { RouterLink } from 'vue-router' export default { props: ['post'], data() { return { post: this.$props.post, comments: [] } }, methods: { newComment() { router.push({ path: `/posts/${this.post.id}/newcomment` }) }, }, beforeMount() { api .get(`api/post_comments/${this.post.id}`) .then((resp) => resp.data) .then((data) => (this.comments = data)) .catch((_) => alert('Failed to fetch comments')) }, components: [Comment], components: { Comment, RouterLink }, } </script> <template> <h3>Comments</h3> <button v-on:click=\"newComment\">New comment</button> <Comment v-for=\"comment in comments\" :comment=\"comment\" :key=\"comment.id\" /> </template>","title":"views/CommentsView.vue"},{"location":"practical_work_3-1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data # Create 6 car owners owners_data = [ { \"username\": \"owner1\", \"password\": \"password1\", \"first_name\": \"John\", \"last_name\": \"Doe\", }, { \"username\": \"owner2\", \"password\": \"password2\", \"first_name\": \"Jane\", \"last_name\": \"Doe\", }, { \"username\": \"owner3\", \"password\": \"password3\", \"first_name\": \"Alice\", \"last_name\": \"Smith\", }, { \"username\": \"owner4\", \"password\": \"password4\", \"first_name\": \"Bob\", \"last_name\": \"Johnson\", }, { \"username\": \"owner5\", \"password\": \"password5\", \"first_name\": \"Eva\", \"last_name\": \"Brown\", }, { \"username\": \"owner6\", \"password\": \"password6\", \"first_name\": \"Charlie\", \"last_name\": \"Miller\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u0432\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c # Create 6 cars cars_data = [ {\"number\": \"ABC123\", \"model\": \"Toyota\", \"color\": \"Blue\"}, {\"number\": \"XYZ456\", \"model\": \"Honda\", \"color\": \"Red\"}, {\"number\": \"DEF789\", \"model\": \"Ford\", \"color\": \"Green\"}, {\"number\": \"GHI123\", \"model\": \"Chevrolet\", \"color\": \"Black\"}, {\"number\": \"JKL456\", \"model\": \"Tesla\", \"color\": \"White\"}, {\"number\": \"MNO789\", \"model\": \"BMW\", \"color\": \"Silver\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): Ownership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0418 \u0435\u0449\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"_type\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriversLicence.objects.create(**data) \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: ./manage.py shell < 3.1/ex1.py \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Toyota \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter toyota_cars = Car.objects.filter(model=\"Toyota\") for car in toyota_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Alice \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter alice_drivers = CarOwner.objects.filter(first_name=\"Alice\") for driver in alice_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriversLicence.objects.filter driver = CarOwner.objects.get(first_name=\"Jane\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") driver_licenses = DriversLicence.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license._type}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter # Query all car owners with red cars red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( ownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.date_of_birth}\") print(\"--------------------\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query the oldest drivers license oldest_license = DriversLicence.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 # query the oldest ownership date oldest_ownership = Ownership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f # query the number of cars for each driver using Count annotate owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"ownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 # query number of cars by model cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"ownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query all car owners sorted by drivers license issue date owners_by_license_issue_date = CarOwner.objects.order_by(\"driverslicence__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(f\"License Issue Date: {owner.driverslicence.get().issue_date}\") print(\"--------------------\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practical_work_3-1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practical_work_3-1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data # Create 6 car owners owners_data = [ { \"username\": \"owner1\", \"password\": \"password1\", \"first_name\": \"John\", \"last_name\": \"Doe\", }, { \"username\": \"owner2\", \"password\": \"password2\", \"first_name\": \"Jane\", \"last_name\": \"Doe\", }, { \"username\": \"owner3\", \"password\": \"password3\", \"first_name\": \"Alice\", \"last_name\": \"Smith\", }, { \"username\": \"owner4\", \"password\": \"password4\", \"first_name\": \"Bob\", \"last_name\": \"Johnson\", }, { \"username\": \"owner5\", \"password\": \"password5\", \"first_name\": \"Eva\", \"last_name\": \"Brown\", }, { \"username\": \"owner6\", \"password\": \"password6\", \"first_name\": \"Charlie\", \"last_name\": \"Miller\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u0432\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c # Create 6 cars cars_data = [ {\"number\": \"ABC123\", \"model\": \"Toyota\", \"color\": \"Blue\"}, {\"number\": \"XYZ456\", \"model\": \"Honda\", \"color\": \"Red\"}, {\"number\": \"DEF789\", \"model\": \"Ford\", \"color\": \"Green\"}, {\"number\": \"GHI123\", \"model\": \"Chevrolet\", \"color\": \"Black\"}, {\"number\": \"JKL456\", \"model\": \"Tesla\", \"color\": \"White\"}, {\"number\": \"MNO789\", \"model\": \"BMW\", \"color\": \"Silver\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): Ownership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0418 \u0435\u0449\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"_type\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriversLicence.objects.create(**data) \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: ./manage.py shell < 3.1/ex1.py","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"practical_work_3-1/#2","text":"\u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Toyota \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter toyota_cars = Car.objects.filter(model=\"Toyota\") for car in toyota_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Alice \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter alice_drivers = CarOwner.objects.filter(first_name=\"Alice\") for driver in alice_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriversLicence.objects.filter driver = CarOwner.objects.get(first_name=\"Jane\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") driver_licenses = DriversLicence.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license._type}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter # Query all car owners with red cars red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( ownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.date_of_birth}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"practical_work_3-1/#3","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query the oldest drivers license oldest_license = DriversLicence.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 # query the oldest ownership date oldest_ownership = Ownership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f # query the number of cars for each driver using Count annotate owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"ownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 # query number of cars by model cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"ownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query all car owners sorted by drivers license issue date owners_by_license_issue_date = CarOwner.objects.order_by(\"driverslicence__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(f\"License Issue Date: {owner.driverslicence.get().issue_date}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"}]}